/*
 * KIDSMASH.pjs
 *
 * Main logic for the game
 */

int WIDTH, HEIGHT;  // Holds current window width/height
int NUM_SHAPES = 5; // Total number of shapes available to randomly generate
array shapes = [];  // List of shapes/particles visible

// Defines how a shape behaves and maintains its state.
// Each Shape subclass should implment update() and draw()
class Shape {
  int x, y, alpha; // x, y coordinate and alpha opacity
  string smile;    // smiley assigned to this shape
  color c;         // color of this shape

  // default constructor, randomly generates location, color, smiley
  Shape(int xin, int yin) {
    x = xin;
    y = yin;
    alpha = 255;
    c = color(random(255), random(255), random(255));
    smile = smiley();
  }

  // shape disappears when this method returns false (alpha <= 0)
  // takes in the rate at which it should fade
  void update(fade) {
    alpha -= fade;
    return alpha > 0;
  }

  // draws this shape with the given random color, current opacity
  // consumes a function that defines custom drawing methods
  void draw(custom) {
    noStroke();
    fill(c, alpha);
    custom.call();
  }

  // paints the assigned smiley on top of this shape
  void drawSmiley() {
    pushMatrix();
    translate(x, y);
    rotate(radians(90));
    translate(-x-25,-y+25);
    fill(0, 0, 0, alpha)
    textSize(80);
    text(smile, x, y);
    popMatrix();
  }
}

// Paints helpful instructions in the lower right hand corner of the screen
class Help extends Shape {
  Help() {
    super(0,0)
  }

  void update() {
    return update(5);
  }

  void draw() {
    textSize(50);
    fill(0,0,0,alpha);
    text("KID SMASH!", x, HEIGHT - 25);

    fill(0,0,0,alpha);
    textSize(12);
    text("let your kids play on the computer! press F11 to go full screen. Inspired by Scott Hanselman's Baby Smash.", x + 3, HEIGHT - 8);
  }
}

// Used for letters that appear and rotate into place when normal keys are pressed
class Text extends Shape {
  string s;
  int rotation;
  float rotationAmount;

  Text(xin, yin, sin) {
    super(xin, yin);
    x = xin;
    y = yin;
    s = sin;
    rotation = random(40, 200);
    rotationAmount = Math.random() / 2;
  }

  // Rotates the shape along with fading it out
  void update() {
    if(rotation > 0) {
      rotation -= (rotation * rotationAmount);
    } else {
      rotation = 0;
    }
    return update(3);
  }

  void draw() {
    draw(function() {
      pushMatrix();
      translate(x, y);
      rotate(radians(rotation));
      translate(-x,-y);
      stroke(0);
      textSize(200);
      fill(c, alpha);
      text(s, x, y);
      popMatrix();

      rotation += 5;
    });
  }
}

// draws a circle with the given width/height
class Circle extends Shape {
  int circleWidth, circleHeight;

  // default constructor picks a random location
  Circle() {
    super(random(width), random(height));
    circleWidth = 200;
    circleHeight = 200;
  }

  // custom constructor to define where and how big the circle is drawn
  Circle(int nX, int nY, int w, int h) {
    super(nX, nY);
    circleWidth = w;
    circleHeight = h;
  }

  void update() {
    return update(10);
  }

  void draw() {
    draw(function() {
      ellipse(x, y, circleWidth, circleHeight);
      drawSmiley();
    });
  }
}

// Draws a square with a smiley
class Square extends Shape {
  Square() {
    super(random(width), random(height));
  }

  void draw() {
    draw(function() {
      rect(x, y, 200, 200);
      drawSmiley();
    });
  }
}

// Draws a triangle with a smiley
class Triangle extends Shape {
  Triangle() {
    super(random(width), random(height));
  }

  void update() {
    return update(10);
  }

  void draw() {
    draw(function() {
      triangle(x-100, y+100,
               x,     y-100,
               x+100, y+100);
      drawSmiley();
    });
  }
}

// Draws a trapezoid with a smiley
class Trapezoid extends Shape {
  Trapezoid() {
    super(random(width), random(height));
  }

  void update() {
    return update(10);
  }

  void draw() {
    draw(function() {
      quad(x-75,  y-100,
           x+75,  y-100,
           x+125, y+100,
           x-125, y+100)
      drawSmiley();
    });
  }
}

// Draws a star with a smiley
class Star extends Shape {
  Star() {
    super(random(width), random(height));
  }

  void update() {
    return update(10);
  }

  void draw() {
    draw(function() {
      beginShape();
      vertex(x, y-100); // top
      vertex(x-30, y-30);
      vertex(x-100, y-20); // left
      vertex(x-50, y+30);
      vertex(x-60, y+100); // bottom left
      vertex(x, y+60);
      vertex(x+60, y+100); // bottom right
      vertex(x+50, y+30);
      vertex(x+100, y-20); // right
      vertex(x+30, y-30);
      endShape();
      drawSmiley();
    });
  }
}

// Draws the pointer which follows the mouse around
class Pointer extends Shape {
  Pointer(int px, int py) {
    super(px, py);
  }

  void update() {
    return update(10);
  }

  void draw() {
    draw(function () {
      beginShape();
      vertex(x, y);
      vertex(x, y+40);
      vertex(x+15, y+25);
      vertex(x+40, y+50);
      vertex(x+50, y+40);
      vertex(x+25, y+15);
      vertex(x+40, y);
      endShape();
    });
  }
}

// Setup the Processing Canvas
void setup() {

  // Set the initial width/height and help text
  WIDTH = window.innerWidth;
  HEIGHT = window.innerHeight;
  shapes.unshift(new Help());

  // Default canvas to full screen and other global settings
  size(WIDTH, HEIGHT);
  frameRate(15);
  textAlign(CENTER);

  // Check every second for the window resize
  setInterval(function() {
    nWIDTH  = window.innerWidth;
    nHEIGHT = window.innerHeight;

    // If either the height or width have changed, resize and repaint help
    if(WIDTH != nWIDTH || HEIGHT != nHEIGHT) {
      WIDTH  = nWIDTH;
      HEIGHT = nHEIGHT;
      shapes.unshift(new Help());
      size(WIDTH, HEIGHT);
    }
  }, 1000);
}

// Main draw loop
void draw() {
  // Set background to white
  background(255);
  noStroke();

  // particle system lifecycle
  // for each shape:
  //   if update() returns false, nix it from the list
  //   if update() returns true, draw() it
  for(var shape=0; shape < shapes.length; shape++) {
    if(shapes[shape] != null) {
      if(!shapes[shape].update()) {
       shapes[shape] = null;
      } else {
        shapes[shape].draw();
      }
    } 
  }

  // Remove null shapes to reduce list size
  while(shapes[shapes.length-1] == null && shapes.length > 0)
    shapes.pop();
}

// returns a random smiley
string smiley() {
  var smileys = [":)", ":D", ":P", ":o", ":]", "8)", "8D", "XD", ";)"];
  return smileys[random(smileys.length)|0];
}

// returns a random shape from our given shapes
Shape randomShape() {
  var which = 0 | random(NUM_SHAPES);

  if(which % NUM_SHAPES == 0)
    return new Circle();
  else if(which % NUM_SHAPES == 1)
    return new Triangle();
  else if(which % NUM_SHAPES == 2)
    return new Trapezoid();
  else if(which % NUM_SHAPES == 3)
    return new Star();
  else
    return new Square();
}

// create a random shape when the mouse is pressed
void mousePressed() {
  shapes.unshift(randomShape());
}

// Set circle's next destination
void mouseMoved(){
  shapes.unshift(new Pointer(mouseX, mouseY));
}

// if a number or letter key has been pressed, create a new Text for it
// otherwise generate a random shape
void keyPressed() {
  if(key == CODED) {
    shapes.unshift(randomShape());
  } else {
    var keyStr = String.fromCharCode(key);
    if(/^[A-Za-z0-9]$/.test(keyStr)) {
      shapes.unshift(new Text(random(width), random(height), keyStr));
    } else {
      shapes.unshift(randomShape());
    }
  }
}
