int WIDTH, HEIGHT;
int NUM_SHAPES = 5;
int cursorX, cursorY;
int yellowFill = 0, redFill = 121;
boolean move = true;
var shapes = [];

class Help extends Shape {
  Help() {
    super(0,0)
    alpha = 2000
  }

  void draw() {
    pushMatrix();
    textSize(50);
    fill(0,0,0,alpha);
    text("KID SMASH!", x, HEIGHT - 25);

    fill(0,0,0,alpha);
    textSize(12);
    text("let your kids play on the computer! press F11 to go full screen", x + 3, HEIGHT - 8);
    popMatrix();
  }
}

class Text {
  int f1, f2, f3, x, y, alpha;
  string s;
  int fade = 3;
  int rotation;
  float rotationAmount;

  Text(xin, yin, sin, f1in, f2in, f3in) {
    x = xin;
    y = yin;
    s = sin;
    f1 = f1in;
    f2 = f2in;
    f3 = f3in;
    alpha = 255;
    rotation = random(40, 200);
    rotationAmount = Math.random() / 2;
  }

  function update() {
    alpha -= fade;
    if(rotation > 0) {
      rotation -= (rotation * rotationAmount);
    } else {
      rotation = 0;
    }
    return alpha > 0;
  }

  function draw() {
    pushMatrix();
    translate(x, y);
    rotate(radians(rotation));
    translate(-x,-y);
    stroke(0);
    textSize(200);
    fill(f1, f2, f3, alpha);
    text(s, x, y);
    popMatrix();

    rotation += 5;
  }
}

class Shape {
  int x, y, alpha;
  color c;

  Shape(int xin, int yin) {
    x = xin;
    y = yin;
    alpha = 255;
    c = color(random(255), random(255), random(255));
  }

  void update() {
    alpha -= 15;
    return alpha > 0;
  }

  void draw(custom) {
    noStroke();
    fill(c, alpha);
    custom.call();
  }
}

class Circle extends Shape {
  int circleWidth, circleHeight;

  Circle() {
    super(random(width), random(height));
    circleWidth = 200;
    circleHeight = 200;
  }

  Circle(int nX, int nY, int w, int h) {
    super(nX, nY);
    circleWidth = w;
    circleHeight = h;
  }

  void draw() {
    draw(function() {
      ellipse(x, y, circleWidth, circleHeight);
    });
  }
}

class Square extends Shape {
  Square() {
    super(random(width), random(height));
  }

  void draw() {
    draw(function() {
      rect(x, y, 200, 200);
    });
  }
}

class Triangle extends Shape {
  Triangle() {
    super(random(width), random(height));
  }

  void draw() {
    draw(function() {
      triangle(x-100, y+100,
               x,     y-100,
               x+100, y+100);
    });
  }
}

class Trapezoid extends Shape {
  Trapezoid() {
    super(random(width), random(height));
  }

  void draw() {
    draw(function() {
      quad(x-75,  y-100,
           x+75,  y-100,
           x+125, y+100,
           x-125, y+100)
    });
  }
}

class Star extends Shape {
  Star() {
    super(random(width), random(height));
  }

  void draw() {
    draw(function() {
      beginShape();
      vertex(x, y-100); // top
      vertex(x-30, y-30);
      vertex(x-100, y-20); // left
      vertex(x-50, y+30);
      vertex(x-60, y+100); // bottom left
      vertex(x, y+60);
      vertex(x+60, y+100); // bottom right
      vertex(x+50, y+30);
      vertex(x+100, y-20); // right
      vertex(x+30, y-30);
      endShape();
    });
  }
}

// Setup the Processing Canvas
void setup() {
  WIDTH = window.innerWidth;
  HEIGHT = window.innerHeight;
  shapes.unshift(new Help());

  size(WIDTH, HEIGHT);
  frameRate(15);
  textAlign(CENTER);

  // Check every second for the window resize
  setInterval(function() {
    nWIDTH  = window.innerWidth;
    nHEIGHT = window.innerHeight;

    if(WIDTH != nWIDTH || HEIGHT != nHEIGHT) {
      WIDTH  = nWIDTH;
      HEIGHT = nHEIGHT;
      shapes.unshift(new Help());
      size(WIDTH, HEIGHT);
    }
  }, 1000);
}

// Main draw loop
void draw() {
  background(255);
  noStroke();

  for(var shape=0; shape < shapes.length; shape++) {
    if(shapes[shape] != null) {
      if(!shapes[shape].update()) {
       shapes[shape] = null;
      } else {
        shapes[shape].draw();
      }
    } 
  }

  while(shapes[shapes.length-1] == null && shapes.length > 0) {
    shapes.pop();
  }
}

void mousePressed() {
  var which = 0 | random(NUM_SHAPES);

  if(which % NUM_SHAPES == 0)
    shapes.unshift(new Circle());
  else if(which % NUM_SHAPES == 1)
    shapes.unshift(new Triangle());
  else if(which % NUM_SHAPES == 2)
    shapes.unshift(new Trapezoid());
  else if(which % NUM_SHAPES == 3)
    shapes.unshift(new Star());
  else
    shapes.unshift(new Square());
}

// Set circle's next destination
void mouseMoved(){
    shapes.unshift(new Circle(mouseX, mouseY, 30, 30));
}

void keyPressed() {
  if(key == CODED) {
    if(keyCode == UP) {
      temp = redFill;
      redFill = yellowFill;
      yellowFill = temp;
    }
  } else {
    if(key == 't') {
      temp = redFill;
      redFill = yellowFill;
      yellowFill = temp;
    } else if(key == 's') {
      move = !move;
    }

    var keyStr = String.fromCharCode(key);
    if(/^[A-Za-z0-9]$/.test(keyStr)) {
      shapes.unshift(new Text(random(width), random(height), keyStr, random(255), random(255), random(255)));
    }
  }
}
